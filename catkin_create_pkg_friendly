#!/bin/bash
rosscriptVer="0.2"
echo "catkin_create_pkg_friendly v$rosscriptVer"
echo "Author: Aleksandar Vladimirov Atanasov"
echo "Description: creates a more userfriendly approach when creating ROS packages using catkin_create_pkg"
echo "Note: Complete  the tutorial for setting the ROS environment or at least make sure rospack is added to PATH"
echo "The numbering of the menu items is the suggested order of filling the information for the package."

# Text formatting
bold=$(tput bold)
normal=$(tput sgr0)
# Example: echo "this is ${bold}bold${normal} and this isn't"

# Errors
# Critical errors
errorMissingName="Package has no name"
errorMissingPath="Package has no assigned ROS workspace"
# Non critical errors
errorSelection="Unknown selection"
errorMissingLangs="Package has no language support"
function err {
  echo "Error: $*"
}

function arg_present () {
  local array="$1[@]"
  local seeking=$2
  local in=1
  for element in "${!array}"
  do
    if [[ $element == $seeking ]]
    then
      in=0
      break
    fi
  done
  return $in
}

function arg_display () {
  local -n args=$1
  echo "${args[*]}"
}

function add_person() {
  declare -a person=()
  
  # Split the input parameters in head and tail with tail being the very last argument
  # This allows using spaces in the name. The email address is not supposed to contain any spaces
  # so in case a valid email address is given, it should be the last item in the list
  names=${@:1:$(($# - 1))}
  email=${@:$#}
  
  #echo "Name:"
  #read names
  #echo "Email address:"
  #read email

  person+="$names " # Adding a trailing space in order to sperarate the name from the email address
  person+="$email"
  
  echo "${person[@]}"
}

#MENU 1:	language - 1)c++, 2)python, 3)java, 4)javascript
#	choice(s): 1,2 (single or multiple choices possible)
#	--> add to an array with args that will be passed onto catkin_create_pkg
#MENU 2:	topic - 1)image, 2)kinematics ...
#	choice(s): 1,2 (single or multiple choices possible)
#	--> add to an array with args that will be passed onto catkin_create_pkg
#	--> loop through topics and see if rospackages for those are actually present
#		if yes continue
#		else offer installation procedure

# Each of the variables below will be used when generating the package including populating the package.xml file
pkgPath=""      # contains the path where the package will be created
pkgName=""	# contains the name of the package
pkgVersion=""       # contains the version of the package
pkgDescription="" # contains the package description
pkgAuthors=()    # contains "pairs" for each author of the package (name,email address)
pkgMaintainers=() # contains "pairs" for each maintainer of the package (name,email address)
pkgLicenses=()  # contains all licenses that the package is under
pkgLangs=()	# contains all the languages the package will support (a language will be converted in a package dependecy)
pkgTasks=()	# contains all the tasks which the package is supposed to fulfill (a task will be converted in package dependecy(ies))

echo "Note: If you want to display the current selection menu you are in, simply press enter when asked to select an item from it"
echo "Select one of the following: "
options=("ROS Workspace" "Name" "Version" "Description" "Author|Maintainer" "License" "Languages" "Tasks" "View pkg" "Create" "About" "Quit")
select opt in "${options[@]}"
do
  case $opt in
    "ROS Workspace")
      # FIXME Right now there is a contradiction - ROSWS/src is displayed as a valid workspace but it is not since src is a
      # subfolder in the workspace. It would be much better if all /src are removed from the paths and added when needed
      pkgPathBackup=$pkgPath
      #countHomes=`echo "$ROS_PACKAGE_PATH" | grep -o "$HOME" | wc -l`
      echo "Attempting to detect valid ROS workspaces"
      if [[ -z "`echo $ROS_PACKAGE_PATH`" ]]
      then
        echo "You haven't set the environment variable ROS_PACKAGE_PATH."
        exit 1
      fi
      #elif [[ $countHomes -eq 0 ]] # check if there is any
      #then
      #  echo "You haven't added a workspace in $HOME to the environment variable ROS_PACKAGE_PATH."
      #  exit 1
      #fi
      
      # split the contents of the ROS_PACKAGE_PATH variable and create an array
      # we use this array to get the workspace where the package will be created (so that we can cd to that directory from anywhere!)
      OIFS=$IFS
      IFS=":"
      possibleRosWsPaths=($ROS_PACKAGE_PATH)
      validRosWsPaths=() # stores the paths to valid ROS workspaces (contain the .catkin_workspace file)
      for ((i=0; i<${#possibleRosWsPaths[@]}; ++i))
      do
        srcDirPresent="${possibleRosWsPaths[$i]}"
        # A workspace is also created in the /home of the user as recommended by the ROS documentation
        # It also has a src directory which holds the packages. The src is at the end of the path of the workspace
        # We check if those two conditions are met
        # Remember: the presence of devel and build folders is not mendatory since those appear AFTER catkin_make has been called in the root folder of the workspace
        if [[ "$srcDirPresent" == *"/home"* && "$srcDirPresent"==*"/src" ]]
        then
          srcDirPresent=${srcDirPresent%"src"} # remove the src and append the .catkin_workspace file to the path in order to check if it's present
          if [[ -e "$srcDirPresent/.catkin_workspace" ]]
          then
            echo "\"${possibleRosWsPaths[$i]}\" is a valid ROS workspace"
            validRosWsPaths+=(${possibleRosWsPaths[$i]})
          else
            echo "\"${possibleRosWsPaths[$i]}\" is NOT a valid ROS workspace"
          fi
        else
          echo "\"${possibleRosWsPaths[$i]}\" is NOT a valid ROS workspace"
        fi
      done
      IFS=$OIFS

      skipWsChoice=0
      if [[ ${#validRosWsPaths[@]} -eq 0 ]] # change this back to 0 so that it work; for now it's just for testing
      then
        echo "Unable to detect any valid ROS workspaces in \"$HOME\". Please specify the path manually"
        echo "Example: $HOME/catkin_ws"
        printf "Enter workspace root directory: "
        read tmpPkgPath
        
        if ! [[ -e "$tmpPkgPath/.catkin_workspace" && -d "$tmpPkgPath/src" ]]
        then
          echo "It appears that you have selected a path which is not a valid (missing \".catkin_workspace\" file and \"src\" subdirectory). Accept anyway?"
          select confirm in "Accept" "Cancel"
          do
            case $confirm in
              "Accept")
                skipWsChoice=1
                pkgPath=$tmpPkgPath
                echo "Package will be created in $pkgPath"
                break
              ;;
              "Cancel")
                pkgPath=$pkgPathBackup
                break
              ;;
            esac
          done
        fi
      fi
      
      if [[ "$skipWsChoice" -eq "0" ]]
      then
        select ws in "${validRosWsPaths[@]}" $pkgPath "Other" "Accept" "Cancel"
        do
          if [[ $ws == "Other" ]] # offer the user a chance to specify a path manually (especially useful if the detection didn't work out)
          then
            printf "Enter a path to a valid workspace: "
            read tmpPkgPath
            
            if ! [[ -e "$tmpPkgPath/.catkin_workspace" && -d "$tmpPkgPath/src" ]]
            then
              echo "It appears that you have selected a path which is not a valid (missing \".catkin_workspace\" file and \"src\" subdirectory). Accept anyway?"
              select confirm in "Accept" "Cancel"
              do
                case $confirm in
                  "Accept")
                    skipWsChoice=1
                    pkgPath=$tmpPkgPath
                    echo "Package will be created in $pkgPath"
                    break
                  ;;
                  "Cancel")
                    pkgPath=$pkgPathBackup
                    break
                  ;;
                esac
              done
            else
              pkgPath=$tmpPkgPath
              echo "Package will be created in $pkgPath"
            fi
          elif [[ $ws == "Accept" ]]
          then
            if ! [[ -z "$pkgPath" ]]
            then
              echo "Package will be created in $pkgPath"
            fi
            break
          elif [[ $ws == "Cancel" ]]
          then
            pkgPath=$pkgPathBackup
            break
          else
            pkgPath=$ws
            echo "Package will be created in $pkgPath"
          fi
        done
      fi
      #possibleRosWsPaths=$(echo $ROS_PACKAGE_PATH | tr ":" " ")
    ;;
    "Name")
      pkgNameBackup=$pkgName
      echo "Before choosing a name for your package please read the naming conventions for ROS packages: http://wiki.ros.org/ROS/Patterns/Conventions#Packages"
      if [[ -z $pkgName ]] 
      then
        echo "Package name: "
        read pkgName
        echo "Package name set to \"$pkgName\""
      else
        echo "Your package already has a name \"$pkgName\""
        nameOptions=("Append" "Replace" "Accept" "Cancel")
        select opt in "${nameOptions[@]}"
        do
          case $opt in
            "Append")
              echo "Add to package name $pkgName: "
              printf %s "$pkgName"
              read pkgNameAppend
              pkgName+=$pkgNameAppend
              echo "Package name set to \"$pkgName\""
            ;;
            "Replace")
              echo "New package: "
              read pkgName
              echo "Package name set to \"$pkgName\""
            ;;
            "Accept")
              break
            ;;
            "Cancel")
              pkgName=$pkgNameBackup
              break
            ;;
          esac
        done
      fi
      #if [[ -z $pkgName ]] 
      #then
      #  echo "Package name: "
      #  read pkgName
      #  echo "Package name set to \"$pkgName\""
      #else
      #  echo "Your package already has a name (\"$pkgName\"). Do you want to append something to it? ([y]=append, [n]=replace) "
      #  read choiceReplace
      #  
      #  if [[ "$choiceReplace" == "y" ]]
      #  then
      #    read pkgNameAppend
      #    pkgName+=$pkgNameAppend
      #    echo "Package name updated to \"$pkgName\""
      #  elif [[ "$choiceReplace" == "n" ]]
      #  then
      #    read pkgName
      #    echo "Package name updated to \"$pkgName\""
      #  else
      #    err $errorSelection
      #  fi 
      #fi
    ;;
    "Version")
      #echo "Enter package version (default: 0.0.1): "
      read -p "Enter package version (default: 0.0.1): " pkgVersion
      if [[ -z $pkgVersion ]]
      then
        pkgVersion="0.0.1"
      fi
    ;;
    "Description")
      read -d `echo -e "\e"` -p "Enter some text and exit by pressing ESC: " pkgDescription
    ;;
    "Author|Maintainer")
      echo "TODO"
      echo "Adding an author(s) and maintainer(s) is optional but recommended in case a user wants to contact the creator of the package or the person who makes sure it is up to date"
      # A list of all authors/maintainers offers the option to edit the information for a specific author/maintainer (Edit, Delete)
      authmaintOptions=("List authors" "List maintainers" "Add author" "Add maintainer")
      select am in "${authmaintOptions[@]}"
      do
        case $am in
          "List authors")
            echo "TODO Pretty print authors"
            echo "Authors: `arg_display pkgAuthors`"
          ;;
          "List maintainers")
            echo "TODO Pretty print maintainers"
            echo "Maintainers: `arg_display pkgMaintainers`"
          ;;
          "Add author")
            #pkgAuthors+=("`add_person`")
            printf "Name: "
            read name
            printf "Email address: "
            read email
            pkgAuthors+=(`add_person $name $email`)
          ;;
          "Add maintainer")
            printf "Name: "
            read name
            printf "Email address: "
            read email
            pkgAuthors+=(`add_person $name $email`)
          ;;
      # FIXME Creating a person is not working properly when there are spaces in the name
      #pkgAuthors+=(`add_person $name $email`)
      #echo "Authors: `arg_display pkgAuthors`"
        esac
      done
    ;;
    "License")
      echo "Although optional it is recommended that you license your package. A package can have multiple licenses depending on the content it includes. An overview of various open source licenses can be seen at https://www.blackducksoftware.com/resources/data/top-20-open-source-licenses"
      echo "For more information on each license visit its website"
      
      # TODO use the same menu structure as language (including the remove menu!)
    ;;
    "Languages")
      if [[ ${#pkgTasks[@]} -eq 0 ]]
      then
        echo "Consider choosing the tasks you want your package to do since some tasks maybe requiring a specific language"
      fi
      
      declare -a langOptions=("C++" "Python" "Java" "JS" "C#" "Remove" "Accept" "Cancel")
      select lang in "${langOptions[@]}"
      do
        case $lang in
          "C++")
            # TODO Adding a language is repetative. Create a function for it and simply call it
            if ! arg_present pkgLangs "C++"
            then
              echo "Added C++ support"
              pkgLangs+=("C++")
            fi
            arg_display pkgLangs
          ;;
          "Python")
            if ! arg_present pkgLangs "Python"
            then
              echo "Added Python support"
              pkgLangs+=("Python")
            fi
            arg_display pkgLangs
          ;;
          "Java")
            if ! arg_present pkgLangs "Java"
            then
              echo "Added Java support"
              pkgLangs+=("Java")
            fi
            arg_display pkgLangs
          ;;
          "JS")
            if ! arg_present pkgLangs "JS"
            then
              echo "Added JS support"
              pkgLangs+=("JS")
            fi
            arg_display pkgLangs
          ;;
          "C#")
            if ! arg_present pkgLangs "C#"
            then
              echo "Added C# support"
              pkgLangs+=("C#")
            fi
            arg_display pkgLangs
          ;;
          "Remove")
            #echo "NOT WORKING PROPERLY!!! For some reason only the first if-statement is executed and then we exit the select loop for removing languages"
            echo "Currently the package will support following languages: "
            arg_display pkgLangs
            declare -a pkgLangsBackup="${pkgLangs[@]}"
            #echo "BACKUP: ${pkgLangs[@]}"
            select pkgLang in "${pkgLangs[@]}" "Accept" "Cancel"
            do
              if [[ "$pkgLang" == "Accept" ]]
              then
                echo "Changes have been accepted"
                break
              elif [[ "$pkgLang" == "Cancel" ]]
              then
                echo "Changes have been cancelled"
                pkgLangs=( $pkgLangsBackup )
                break
              else
                echo "Removed $pkgLang from supported languages"
                pkgLangs=( ${pkgLangs[@]/"$pkgLang"} )  # Using only this here removes the selected properly!
                echo "New list of supported languages: "
                arg_display pkgLangs
              fi
            done
          ;;
          "Accept")
            break
          ;;
          "Cancel")
            echo "TODO"
          ;;
          *)
            err $errorSelection
          ;;
        esac
      done
    ;;
    "Tasks")
      echo "TODO"
      # display a set of tasks each bound to one or more ROS dependencies
      # if dependencies are not met, offer the user the choice to install (if he/she chooses not to do so, remove task along with dependencies)
    ;;
    "Create")
      echo "TODO"
      # check if everything that is required for the package creation is present
      # if [[ -z $pkgPath]] ...
      # ...
      
      echo "Checking if required information for package generation is present"
      errorsPresent=0
      
      if [[ -z $pkgName ]]
      then
        errorsPresent=1
        err $errorMissingName
      fi
      
      if [[ -z $pkgPath ]]
      then
        errorsPresent=1
        err $errorMissingPath
      fi
      
      if [[ ${#pkgLangs[@]} -eq 0 ]]
      then
        errorsPresent=1
        err $errorMissingLangs
      fi
      
      if [[ errorsPresent -ne 1 ]]
      then
        # Change the current path of the script's environment to the selected path for the package
        echo "Creating package"
        cd "$pkgPath"
        exec
        echo "Changing current directory to $PWD"
        
        # catkin_create_pkg $pkgName `arg_display pkgLangs` ...
      
        exit 0
      fi
      
    ;;
    "View pkg")
      echo "Current package settings"
      echo "------------------------"
      echo "Name: $pkgName"
      echo "Version: $pkgVersion"
      echo "Language support: `arg_display pkgLangs`"
      echo "Path: $pkgPath"
      echo "Description: $pkgDescription"
    ;;
    "About")
      echo "TODO"
      printf "
                                 rosscript v$rosscriptVer
                            --------------------------
This script is intended for easing the use of ROS' package creation tool ${bold}catkin_create_pkg${normal}
It will guide to through the process of creating your very own package. The numbering in the
selection menu is in a way a recommended way to go through this process though some option can
be omitted or done in a different order (example: define package name after package version).
The only exception is ${bold}Create${normal} which requires previous steps to be completed before
initiating the package creation process

Hope you find it useful and expand your view on the world by using ROS ;)

CHANGELOG:
${bold}v0.2${normal}
  - expanded the menu to include additional information required for the package - name, workspace, author etc.
  - added basic workspace detection in user's hope directory based on ROS_PACKAGE_PATH, .catkin_workspace file and the src directory
  - improved the workings of the Name menu
  - fixed language removal menu
${bold}v0.1${normal}
  - added the a trimmed-down menu include language selection
  - added language support management for package with the option to remove selected languages
"
    ;;
    "Quit")
      echo "Exiting without creating a new package..."
      exit 0
    ;;
    *)
      err $errorSelection
    ;;
  esac
done
